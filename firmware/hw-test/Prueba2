
#include "soc-hw.h"

volatile uint8_t *p;
volatile unsigned char flag;
volatile unsigned char i;

ps2_t   *ps2  = (ps2_t *)       0xF0020000;
uart_t   *uart0  = (uart_t *)   0xF0000000;

//PS/2 RECEPCION
void irq_handler(uint32_t irq){
	flag=1;
	uart_putchar(0x49); 
	*p = ps2->rx;

return;
}

//PS/2 TRANSMISION
void ps2_tx (char c)
{
	i=0;
	while (ps2->ucr & PS2_BUSY) ;
	uart_putchar(0x66);//234-168=66=B
	ps2->tx = c;
	
return;
}

void mouse_status(unsigned char status)
{
char digit, pos;
	digit = (status & 0xF0);
    switch(digit) {
		case (0x00):uart_putchar(0+0x30);break;//NON SIGNED
		case (0x10):uart_putchar(1+0x30);break;//SIGNED X
		case (0x20):uart_putchar(2+0x30);break;//SIGNED Y
		case (0x30):uart_putchar(3+0x30);break;//BOTH SIGNED
		case (0x40):uart_putchar(4+0x30);break;//X OVERFLOW  
		case (0x50):uart_putchar(5+0x30);break;//X OVERFLOW AND X SIGNED
		case (0x60):uart_putchar(6+0x30);break;//X OVERFLOW Y SIGNED
		case (0x70):uart_putchar(7+0x30);break;//X OVERFLOW BOTH SIGNED 
		case (0x80):uart_putchar(8+0x30);break;//
		case (0x90):uart_putchar(9+0x30);break;//
		case (0xA0):uart_putchar(10+0x30);break;//
		case (0xB0):uart_putchar(11+0x30);break;//
		case (0xC0):uart_putchar(12+0x30);break;//
		default:uart_putchar(13+0x30);break;//

		}
    
}


//HEXPRINT
void hexprint(unsigned char hexval)
{
  char digit[2], pos;
  uart_putstr("0x");
  for(pos = 0; pos < 2; pos++)
    {
      digit[pos] = (hexval & 0xF);  /* last hexit */
      hexval = hexval >> 4;
    }
  for(pos = 1; pos > -1; pos--)
    {
      if(digit[pos] < 0xA)
        uart_putstr((char *)digit[pos] + '0');
      else
        uart_putstr((char *)digit[pos] + 'A' - 10);
    }
  uart_putchar(' ');
}

//**********MAIN***********
int main(int argc, char **argv)
{	unsigned char j=0, byte_1=0,byte_2=0,byte_3 =0, DoneFrame=0;
	flag=0;
	i=0;
	uart_putstr("iniciando \r\n");
	irq_enable();
	irq_set_mask( 0x00000004); 
	uart_putstr("**PaInTES/PS2** > \r\n");
//Cada vez que se halla pulsado el Reset del SIE, el mouse se reseteará nuevamente y se habilitará el envío de datos	
	ps2_tx(0xFF);
	for(i=0;i<200;i++);//Un delay por si las moscas
	ps2_tx(0xF4);
	for(i=0;i<100;i++);

flag=0;i=0;
//Despues de la activación se reciben paquetes de 3 bytes
for(;;){	
		while(!flag);
		switch(i){
			case 0: byte_1=*p;i++; break;
			case 1: byte_2=*p;i++; break;
			case 2: byte_3=*p;i=0; DoneFrame = 1; break;
			default: i=0; break;
			}			
			if(DoneFrame==1) {mouse_status(byte_1);DoneFrame=0;}
		flag=0;	
			
	}

return 0;

}
/* PS2

#define PS2_DR    0x20                    // RX Data Ready //Rx available
#define PS2_BUSY  0x01                    // TX Busy
#define PS2_IRQ   0x10                    // IRQ

typedef struct {switch (*p){

   volatile uint32_t ucr;//0xF0020000
   volatile uint32_t rx;//0xF00200004
   volatile uint32_t tx;//0xF0020008
   volatile uint32_t bitcount;//0xF002000C
} ps2_t;

//void ps2_init();
*/

