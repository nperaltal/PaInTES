
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac8  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000010  00000ac8  00000ac8  00000b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000000c  00000ad8  00000ad8  00000b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000090  00000ae4  00000ae4  00000b38  2**2
                  ALLOC
  4 .debug_abbrev 00000345  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d7  00000000  00000000  00000e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000767  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000120  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000346  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000191  00000000  00000000  00002122  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  000022b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000022f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000202  00000000  00000000  00002313  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00002515  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 4f 	calli 208 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0a f0 	ori gp,gp,0xaf0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0a e4 	ori r1,r1,0xae4
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0b 74 	ori r3,r3,0xb74

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 01 d3 	calli 888 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <irq_handler>:
uart_t  *uart0  = (uart_t *)    0xF0000000;

//********PS/2 RECEPCION********
void irq_handler(uint32_t irq){
	flag=1;
	*p = ps2->rx;
 208:	78 01 00 00 	mvhi r1,0x0
 20c:	38 21 0a d8 	ori r1,r1,0xad8
 210:	28 22 00 00 	lw r2,(r1+0)
LCD_t   *LCD = (LCD_t *)  	0xF0010000;
uart_t  *uart0  = (uart_t *)    0xF0000000;

//********PS/2 RECEPCION********
void irq_handler(uint32_t irq){
	flag=1;
 214:	78 01 00 00 	mvhi r1,0x0
 218:	38 21 0a ec 	ori r1,r1,0xaec
 21c:	34 03 00 01 	mvi r3,1
 220:	30 23 00 00 	sb (r1+0),r3
	*p = ps2->rx;
 224:	78 01 00 00 	mvhi r1,0x0
 228:	28 42 00 04 	lw r2,(r2+4)
 22c:	38 21 0a e8 	ori r1,r1,0xae8
 230:	28 21 00 00 	lw r1,(r1+0)
 234:	20 42 00 ff 	andi r2,r2,0xff
 238:	30 22 00 00 	sb (r1+0),r2
return;
}
 23c:	c3 a0 00 00 	ret

00000240 <ps2_tx>:

//********PS/2 TRANSMISION********
void ps2_tx (char c)
{
 240:	78 02 00 00 	mvhi r2,0x0
 244:	38 42 0a d8 	ori r2,r2,0xad8
 248:	28 43 00 00 	lw r3,(r2+0)
 24c:	20 21 00 ff 	andi r1,r1,0xff
	while (ps2->ucr & PS2_BUSY) ;
 250:	28 62 00 00 	lw r2,(r3+0)
 254:	20 42 00 01 	andi r2,r2,0x1
 258:	5c 40 ff fe 	bne r2,r0,250 <ps2_tx+0x10>
	ps2->tx = c;
 25c:	58 61 00 08 	sw (r3+8),r1
	
return;
}
 260:	c3 a0 00 00 	ret

00000264 <conversion>:


//********CONVERSION DE POSICIONES EN DIRECCIONES DEL ESPACIO DE DIBUJO********
int conversion(char st2, char posX, char posY){
 264:	20 21 00 ff 	andi r1,r1,0xff
int temp;
switch(st2){
 268:	34 04 00 10 	mvi r4,16
return;
}


//********CONVERSION DE POSICIONES EN DIRECCIONES DEL ESPACIO DE DIBUJO********
int conversion(char st2, char posX, char posY){
 26c:	20 42 00 ff 	andi r2,r2,0xff
 270:	20 63 00 ff 	andi r3,r3,0xff
int temp;
switch(st2){
 274:	44 24 00 31 	be r1,r4,338 <conversion+0xd4>
 278:	54 24 00 06 	bgu r1,r4,290 <conversion+0x2c>
 27c:	44 20 00 40 	be r1,r0,37c <conversion+0x118>
 280:	78 01 00 00 	mvhi r1,0x0
 284:	38 21 0a f0 	ori r1,r1,0xaf0
 288:	28 21 00 00 	lw r1,(r1+0)
 28c:	c3 a0 00 00 	ret
 290:	34 04 00 20 	mvi r4,32
 294:	44 24 00 16 	be r1,r4,2ec <conversion+0x88>
 298:	34 04 00 30 	mvi r4,48
 29c:	5c 24 ff f9 	bne r1,r4,280 <conversion+0x1c>
				temp=(xprima+posX/4)+((posY/4)*320);
				//temp=(xprima+((posY/4)*(320)));				
				if(temp>=0 && temp<=76799) xprima=temp;
				//}
			 break; 
	case (0x30): 		posY=posY*(-1);posX=posX*(-1);
 2a0:	c8 03 18 00 	sub r3,r0,r3
				//if((xprima-posX/4) >= ((xprima/320)*320+1)){//y negativo x negativo
				temp=(xprima-posX/4)+((posY/4)*320);
 2a4:	20 63 00 ff 	andi r3,r3,0xff
 2a8:	78 04 00 00 	mvhi r4,0x0
 2ac:	00 63 00 02 	srui r3,r3,2
				temp=(xprima+posX/4)+((posY/4)*320);
				//temp=(xprima+((posY/4)*(320)));				
				if(temp>=0 && temp<=76799) xprima=temp;
				//}
			 break; 
	case (0x30): 		posY=posY*(-1);posX=posX*(-1);
 2b0:	c8 02 08 00 	sub r1,r0,r2
				//if((xprima-posX/4) >= ((xprima/320)*320+1)){//y negativo x negativo
				temp=(xprima-posX/4)+((posY/4)*320);
 2b4:	38 84 0a f0 	ori r4,r4,0xaf0
 2b8:	20 21 00 ff 	andi r1,r1,0xff
 2bc:	28 85 00 00 	lw r5,(r4+0)
 2c0:	3c 66 00 08 	sli r6,r3,8
 2c4:	00 21 00 02 	srui r1,r1,2
 2c8:	3c 63 00 06 	sli r3,r3,6
 2cc:	c8 a1 08 00 	sub r1,r5,r1
 2d0:	b4 66 18 00 	add r3,r3,r6
				//temp=(xprima+((posY/4)*(320)));				
				if(temp>=0 && temp<=76799) xprima=temp;
 2d4:	78 02 00 01 	mvhi r2,0x1
				if(temp>=0 && temp<=76799) xprima=temp;
				//}
			 break; 
	case (0x30): 		posY=posY*(-1);posX=posX*(-1);
				//if((xprima-posX/4) >= ((xprima/320)*320+1)){//y negativo x negativo
				temp=(xprima-posX/4)+((posY/4)*320);
 2d8:	b4 23 08 00 	add r1,r1,r3
				//temp=(xprima+((posY/4)*(320)));				
				if(temp>=0 && temp<=76799) xprima=temp;
 2dc:	38 42 2b ff 	ori r2,r2,0x2bff
 2e0:	50 41 00 36 	bgeu r2,r1,3b8 <conversion+0x154>
 2e4:	b8 a0 08 00 	mv r1,r5
 2e8:	c3 a0 00 00 	ret
				temp=(xprima-posX/4)-((posY/4)*320);
				//temp=(xprima-((posY/4)*320));				
				if(temp>=0 && temp<=76799) xprima=temp;
				//}
			break; 
	case (0x20): 		posY=posY*(-1);
 2ec:	c8 03 18 00 	sub r3,r0,r3
				//if((xprima+posX/4) <= ((xprima/320)*320+320)){//y negativo x positivo
				temp=(xprima+posX/4)+((posY/4)*320);
 2f0:	20 63 00 ff 	andi r3,r3,0xff
 2f4:	78 04 00 00 	mvhi r4,0x0
 2f8:	00 63 00 02 	srui r3,r3,2
 2fc:	38 84 0a f0 	ori r4,r4,0xaf0
 300:	28 85 00 00 	lw r5,(r4+0)
 304:	3c 66 00 08 	sli r6,r3,8
 308:	00 42 00 02 	srui r2,r2,2
 30c:	3c 63 00 06 	sli r3,r3,6
 310:	b4 45 10 00 	add r2,r2,r5
 314:	b4 66 08 00 	add r1,r3,r6
				//temp=(xprima+((posY/4)*(320)));				
				if(temp>=0 && temp<=76799) xprima=temp;
 318:	78 03 00 01 	mvhi r3,0x1
				if(temp>=0 && temp<=76799) xprima=temp;
				//}
			break; 
	case (0x20): 		posY=posY*(-1);
				//if((xprima+posX/4) <= ((xprima/320)*320+320)){//y negativo x positivo
				temp=(xprima+posX/4)+((posY/4)*320);
 31c:	b4 41 08 00 	add r1,r2,r1
				//temp=(xprima+((posY/4)*(320)));				
				if(temp>=0 && temp<=76799) xprima=temp;
 320:	38 63 2b ff 	ori r3,r3,0x2bff
 324:	50 61 00 03 	bgeu r3,r1,330 <conversion+0xcc>
			 break; 
	case (0x30): 		posY=posY*(-1);posX=posX*(-1);
				//if((xprima-posX/4) >= ((xprima/320)*320+1)){//y negativo x negativo
				temp=(xprima-posX/4)+((posY/4)*320);
				//temp=(xprima+((posY/4)*(320)));				
				if(temp>=0 && temp<=76799) xprima=temp;
 328:	b8 a0 08 00 	mv r1,r5
 32c:	c3 a0 00 00 	ret
			break; 
	case (0x20): 		posY=posY*(-1);
				//if((xprima+posX/4) <= ((xprima/320)*320+320)){//y negativo x positivo
				temp=(xprima+posX/4)+((posY/4)*320);
				//temp=(xprima+((posY/4)*(320)));				
				if(temp>=0 && temp<=76799) xprima=temp;
 330:	58 81 00 00 	sw (r4+0),r1
 334:	c3 a0 00 00 	ret
				if(temp>=0 && temp<=76799) xprima=temp;
				//}
			break; 
	case (0x10): 		posX=posX*(-1); 
				//if((xprima-posX/4) >= ((xprima/320)*320+1)){//x negativo y positivo
				temp=(xprima-posX/4)-((posY/4)*320);
 338:	00 63 00 02 	srui r3,r3,2
 33c:	78 04 00 00 	mvhi r4,0x0
 340:	38 84 0a f0 	ori r4,r4,0xaf0
 344:	3c 66 00 08 	sli r6,r3,8
				temp=(xprima+posX/4)-((posY/4)*320);
				//temp=(xprima-((posY/4)*320));				
				if(temp>=0 && temp<=76799) xprima=temp;
				//}
			break; 
	case (0x10): 		posX=posX*(-1); 
 348:	c8 02 10 00 	sub r2,r0,r2
				//if((xprima-posX/4) >= ((xprima/320)*320+1)){//x negativo y positivo
				temp=(xprima-posX/4)-((posY/4)*320);
 34c:	3c 63 00 06 	sli r3,r3,6
 350:	28 85 00 00 	lw r5,(r4+0)
 354:	20 42 00 ff 	andi r2,r2,0xff
 358:	b4 66 08 00 	add r1,r3,r6
 35c:	00 42 00 02 	srui r2,r2,2
 360:	c8 a1 08 00 	sub r1,r5,r1
				//temp=(xprima-((posY/4)*320));				
				if(temp>=0 && temp<=76799) xprima=temp;
 364:	78 03 00 01 	mvhi r3,0x1
				if(temp>=0 && temp<=76799) xprima=temp;
				//}
			break; 
	case (0x10): 		posX=posX*(-1); 
				//if((xprima-posX/4) >= ((xprima/320)*320+1)){//x negativo y positivo
				temp=(xprima-posX/4)-((posY/4)*320);
 368:	c8 22 08 00 	sub r1,r1,r2
				//temp=(xprima-((posY/4)*320));				
				if(temp>=0 && temp<=76799) xprima=temp;
 36c:	38 63 2b ff 	ori r3,r3,0x2bff
 370:	50 61 ff f0 	bgeu r3,r1,330 <conversion+0xcc>
			 break; 
	case (0x30): 		posY=posY*(-1);posX=posX*(-1);
				//if((xprima-posX/4) >= ((xprima/320)*320+1)){//y negativo x negativo
				temp=(xprima-posX/4)+((posY/4)*320);
				//temp=(xprima+((posY/4)*(320)));				
				if(temp>=0 && temp<=76799) xprima=temp;
 374:	b8 a0 08 00 	mv r1,r5
 378:	c3 a0 00 00 	ret
//********CONVERSION DE POSICIONES EN DIRECCIONES DEL ESPACIO DE DIBUJO********
int conversion(char st2, char posX, char posY){
int temp;
switch(st2){
	case (0x00):  		//if((xprima+posX/4) <= ((xprima/320)*320+320)){ //sin signo
				temp=(xprima+posX/4)-((posY/4)*320);
 37c:	78 04 00 00 	mvhi r4,0x0
 380:	00 63 00 02 	srui r3,r3,2
 384:	38 84 0a f0 	ori r4,r4,0xaf0
 388:	28 86 00 00 	lw r6,(r4+0)
 38c:	3c 65 00 08 	sli r5,r3,8
 390:	00 41 00 02 	srui r1,r2,2
 394:	3c 63 00 06 	sli r3,r3,6
 398:	b4 26 08 00 	add r1,r1,r6
 39c:	b4 65 18 00 	add r3,r3,r5
				//temp=(xprima-((posY/4)*320));				
				if(temp>=0 && temp<=76799) xprima=temp;
 3a0:	78 05 00 01 	mvhi r5,0x1
//********CONVERSION DE POSICIONES EN DIRECCIONES DEL ESPACIO DE DIBUJO********
int conversion(char st2, char posX, char posY){
int temp;
switch(st2){
	case (0x00):  		//if((xprima+posX/4) <= ((xprima/320)*320+320)){ //sin signo
				temp=(xprima+posX/4)-((posY/4)*320);
 3a4:	c8 23 08 00 	sub r1,r1,r3
				//temp=(xprima-((posY/4)*320));				
				if(temp>=0 && temp<=76799) xprima=temp;
 3a8:	38 a5 2b ff 	ori r5,r5,0x2bff
 3ac:	50 a1 ff e1 	bgeu r5,r1,330 <conversion+0xcc>
 3b0:	b8 c0 08 00 	mv r1,r6
 3b4:	c3 a0 00 00 	ret
			 break; 
	case (0x30): 		posY=posY*(-1);posX=posX*(-1);
				//if((xprima-posX/4) >= ((xprima/320)*320+1)){//y negativo x negativo
				temp=(xprima-posX/4)+((posY/4)*320);
				//temp=(xprima+((posY/4)*(320)));				
				if(temp>=0 && temp<=76799) xprima=temp;
 3b8:	58 81 00 00 	sw (r4+0),r1
				//}
			 break; 
	default: break;
}
return xprima;
}
 3bc:	c3 a0 00 00 	ret

000003c0 <initPuntero>:

void initPuntero(){
xprima=76799;
 3c0:	78 01 00 00 	mvhi r1,0x0
 3c4:	78 02 00 01 	mvhi r2,0x1
 3c8:	38 21 0a f0 	ori r1,r1,0xaf0
 3cc:	38 42 2b ff 	ori r2,r2,0x2bff
 3d0:	58 22 00 00 	sw (r1+0),r2
return;
}
 3d4:	c3 a0 00 00 	ret

000003d8 <pintarBlanco>:



//********PINTAR BLANCO********
void pintarBlanco(char st2, char posX, char posY){
 3d8:	37 9c ff dc 	addi sp,sp,-36
 3dc:	5b 8b 00 24 	sw (sp+36),r11
 3e0:	5b 8c 00 20 	sw (sp+32),r12
 3e4:	5b 8d 00 1c 	sw (sp+28),r13
 3e8:	5b 8e 00 18 	sw (sp+24),r14
 3ec:	5b 8f 00 14 	sw (sp+20),r15
 3f0:	5b 90 00 10 	sw (sp+16),r16
 3f4:	5b 91 00 0c 	sw (sp+12),r17
 3f8:	5b 92 00 08 	sw (sp+8),r18
 3fc:	5b 9d 00 04 	sw (sp+4),ra
int addr;
char j;
	addr = conversion(st2,posX,posY);
 400:	20 42 00 ff 	andi r2,r2,0xff
 404:	20 63 00 ff 	andi r3,r3,0xff
 408:	20 21 00 ff 	andi r1,r1,0xff
 40c:	fb ff ff 96 	calli 264 <conversion>
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x01;}
 410:	78 02 00 00 	mvhi r2,0x0
 414:	38 42 0a dc 	ori r2,r2,0xadc

//********PINTAR BLANCO********
void pintarBlanco(char st2, char posX, char posY){
int addr;
char j;
	addr = conversion(st2,posX,posY);
 418:	78 04 ff ff 	mvhi r4,0xffff
 41c:	78 03 ff ff 	mvhi r3,0xffff
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x01;}
 420:	28 42 00 00 	lw r2,(r2+0)

//********PINTAR BLANCO********
void pintarBlanco(char st2, char posX, char posY){
int addr;
char j;
	addr = conversion(st2,posX,posY);
 424:	38 84 40 02 	ori r4,r4,0x4002
 428:	38 63 00 03 	ori r3,r3,0x3
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x01;}
 42c:	34 06 00 01 	mvi r6,1

//********PINTAR BLANCO********
void pintarBlanco(char st2, char posX, char posY){
int addr;
char j;
	addr = conversion(st2,posX,posY);
 430:	b4 24 80 00 	add r16,r1,r4
 434:	b4 23 78 00 	add r15,r1,r3
 438:	34 2e c0 00 	addi r14,r1,-16384
 43c:	34 2d 80 01 	addi r13,r1,-32767
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x01;}
 440:	34 04 00 00 	mvi r4,0
void pintarBlanco(char st2, char posX, char posY){
int addr;
char j;
	addr = conversion(st2,posX,posY);
	for(j=0;j<4;j++){
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x01;}
 444:	34 0c 3f ff 	mvi r12,16383
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x01;}
 448:	b8 c0 18 00 	mv r3,r6
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
 44c:	34 12 00 02 	mvi r18,2
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x01;}
 450:	34 08 00 03 	mvi r8,3
 454:	34 31 fe c0 	addi r17,r1,-320
char j;
	addr = conversion(st2,posX,posY);
	for(j=0;j<4;j++){
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
 458:	34 2a fe c1 	addi r10,r1,-319
int addr;
char j;
	addr = conversion(st2,posX,posY);
	for(j=0;j<4;j++){
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x01;}
 45c:	b4 26 48 00 	add r9,r1,r6
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x01;}
 460:	34 05 3f fe 	mvi r5,16382
	if(addr>49149 && addr<=65532) { if(j==0){LCD->addr3=addr;   LCD->DATA = 0x01;}
					if(j==1){LCD->addr3=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr3=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr3=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>65532 && addr<=76799) {if(j==0){LCD->addr4=addr; LCD->DATA = 0x01;}
 464:	34 0b 2c 02 	mvi r11,11266
void pintarBlanco(char st2, char posX, char posY){
int addr;
char j;
	addr = conversion(st2,posX,posY);
	for(j=0;j<4;j++){
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x01;}
 468:	54 2c 00 05 	bgu r1,r12,47c <pintarBlanco+0xa4>
 46c:	20 87 00 ff 	andi r7,r4,0xff
 470:	5c e0 00 2f 	bne r7,r0,52c <pintarBlanco+0x154>
 474:	58 41 00 00 	sw (r2+0),r1
 478:	58 43 00 14 	sw (r2+20),r3
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x01;}
 47c:	55 c5 00 05 	bgu r14,r5,490 <pintarBlanco+0xb8>
 480:	20 87 00 ff 	andi r7,r4,0xff
 484:	5c e0 00 2e 	bne r7,r0,53c <pintarBlanco+0x164>
 488:	58 41 00 04 	sw (r2+4),r1
 48c:	58 43 00 14 	sw (r2+20),r3
					if(j==1){LCD->addr1=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr1=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr1=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>32766 && addr<=49149) { if(j==0){LCD->addr2=addr;   LCD->DATA = 0x01;}
 490:	55 a5 00 05 	bgu r13,r5,4a4 <pintarBlanco+0xcc>
 494:	20 87 00 ff 	andi r7,r4,0xff
 498:	5c e0 00 2d 	bne r7,r0,54c <pintarBlanco+0x174>
 49c:	58 41 00 08 	sw (r2+8),r1
 4a0:	58 43 00 14 	sw (r2+20),r3
					if(j==1){LCD->addr2=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr2=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr2=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>49149 && addr<=65532) { if(j==0){LCD->addr3=addr;   LCD->DATA = 0x01;}
 4a4:	56 05 00 05 	bgu r16,r5,4b8 <pintarBlanco+0xe0>
 4a8:	20 87 00 ff 	andi r7,r4,0xff
 4ac:	5c e0 00 2c 	bne r7,r0,55c <pintarBlanco+0x184>
 4b0:	58 41 00 0c 	sw (r2+12),r1
 4b4:	58 43 00 14 	sw (r2+20),r3
					if(j==1){LCD->addr3=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr3=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr3=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>65532 && addr<=76799) {if(j==0){LCD->addr4=addr; LCD->DATA = 0x01;}
 4b8:	55 eb 00 05 	bgu r15,r11,4cc <pintarBlanco+0xf4>
 4bc:	20 87 00 ff 	andi r7,r4,0xff
 4c0:	5c e0 00 16 	bne r7,r0,518 <pintarBlanco+0x140>
 4c4:	58 41 00 10 	sw (r2+16),r1
 4c8:	58 43 00 14 	sw (r2+20),r3
//********PINTAR BLANCO********
void pintarBlanco(char st2, char posX, char posY){
int addr;
char j;
	addr = conversion(st2,posX,posY);
	for(j=0;j<4;j++){
 4cc:	51 06 00 0f 	bgeu r8,r6,508 <pintarBlanco+0x130>
					if(j==2){LCD->addr4=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr4=addr-320;LCD->DATA = 0x01;}
					}
			}		
return;
}
 4d0:	2b 9d 00 04 	lw ra,(sp+4)
 4d4:	2b 8b 00 24 	lw r11,(sp+36)
 4d8:	2b 8c 00 20 	lw r12,(sp+32)
 4dc:	2b 8d 00 1c 	lw r13,(sp+28)
 4e0:	2b 8e 00 18 	lw r14,(sp+24)
 4e4:	2b 8f 00 14 	lw r15,(sp+20)
 4e8:	2b 90 00 10 	lw r16,(sp+16)
 4ec:	2b 91 00 0c 	lw r17,(sp+12)
 4f0:	2b 92 00 08 	lw r18,(sp+8)
 4f4:	37 9c 00 24 	addi sp,sp,36
 4f8:	c3 a0 00 00 	ret
					if(j==2){LCD->addr3=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr3=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>65532 && addr<=76799) {if(j==0){LCD->addr4=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr4=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr4=addr-319;LCD->DATA = 0x01;}
 4fc:	5c f2 00 2c 	bne r7,r18,5ac <pintarBlanco+0x1d4>
 500:	58 4a 00 10 	sw (r2+16),r10
 504:	58 43 00 14 	sw (r2+20),r3
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x01;}
 508:	34 c6 00 01 	addi r6,r6,1
 50c:	34 84 00 01 	addi r4,r4,1
 510:	20 c6 00 ff 	andi r6,r6,0xff
 514:	e3 ff ff d5 	bi 468 <pintarBlanco+0x90>
					if(j==1){LCD->addr3=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr3=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr3=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>65532 && addr<=76799) {if(j==0){LCD->addr4=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr4=addr+1;  LCD->DATA = 0x01;}
 518:	5c e3 ff f9 	bne r7,r3,4fc <pintarBlanco+0x124>
 51c:	58 49 00 10 	sw (r2+16),r9
 520:	58 43 00 14 	sw (r2+20),r3
//********PINTAR BLANCO********
void pintarBlanco(char st2, char posX, char posY){
int addr;
char j;
	addr = conversion(st2,posX,posY);
	for(j=0;j<4;j++){
 524:	51 06 ff f9 	bgeu r8,r6,508 <pintarBlanco+0x130>
 528:	e3 ff ff ea 	bi 4d0 <pintarBlanco+0xf8>
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x01;}
 52c:	5c e3 00 1c 	bne r7,r3,59c <pintarBlanco+0x1c4>
 530:	58 49 00 00 	sw (r2+0),r9
 534:	58 43 00 14 	sw (r2+20),r3
 538:	e3 ff ff d1 	bi 47c <pintarBlanco+0xa4>
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x01;}
					if(j==1){LCD->addr1=addr+1;  LCD->DATA = 0x01;}
 53c:	5c e3 00 14 	bne r7,r3,58c <pintarBlanco+0x1b4>
 540:	58 49 00 04 	sw (r2+4),r9
 544:	58 43 00 14 	sw (r2+20),r3
 548:	e3 ff ff d2 	bi 490 <pintarBlanco+0xb8>
					if(j==2){LCD->addr1=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr1=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>32766 && addr<=49149) { if(j==0){LCD->addr2=addr;   LCD->DATA = 0x01;}
					if(j==1){LCD->addr2=addr+1;  LCD->DATA = 0x01;}
 54c:	5c e3 00 0c 	bne r7,r3,57c <pintarBlanco+0x1a4>
 550:	58 49 00 08 	sw (r2+8),r9
 554:	58 43 00 14 	sw (r2+20),r3
 558:	e3 ff ff d3 	bi 4a4 <pintarBlanco+0xcc>
					if(j==2){LCD->addr2=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr2=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>49149 && addr<=65532) { if(j==0){LCD->addr3=addr;   LCD->DATA = 0x01;}
					if(j==1){LCD->addr3=addr+1;  LCD->DATA = 0x01;}
 55c:	5c e3 00 04 	bne r7,r3,56c <pintarBlanco+0x194>
 560:	58 49 00 0c 	sw (r2+12),r9
 564:	58 43 00 14 	sw (r2+20),r3
 568:	e3 ff ff d4 	bi 4b8 <pintarBlanco+0xe0>
					if(j==2){LCD->addr3=addr-319;LCD->DATA = 0x01;}
 56c:	5c f2 00 16 	bne r7,r18,5c4 <pintarBlanco+0x1ec>
 570:	58 4a 00 0c 	sw (r2+12),r10
 574:	58 43 00 14 	sw (r2+20),r3
 578:	e3 ff ff d0 	bi 4b8 <pintarBlanco+0xe0>
					if(j==2){LCD->addr1=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr1=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>32766 && addr<=49149) { if(j==0){LCD->addr2=addr;   LCD->DATA = 0x01;}
					if(j==1){LCD->addr2=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr2=addr-319;LCD->DATA = 0x01;}
 57c:	5c f2 00 16 	bne r7,r18,5d4 <pintarBlanco+0x1fc>
 580:	58 4a 00 08 	sw (r2+8),r10
 584:	58 43 00 14 	sw (r2+20),r3
 588:	e3 ff ff c7 	bi 4a4 <pintarBlanco+0xcc>
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x01;}
					if(j==1){LCD->addr1=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr1=addr-319;LCD->DATA = 0x01;}
 58c:	5c f2 00 16 	bne r7,r18,5e4 <pintarBlanco+0x20c>
 590:	58 4a 00 04 	sw (r2+4),r10
 594:	58 43 00 14 	sw (r2+20),r3
 598:	e3 ff ff be 	bi 490 <pintarBlanco+0xb8>
char j;
	addr = conversion(st2,posX,posY);
	for(j=0;j<4;j++){
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
 59c:	5c f2 00 16 	bne r7,r18,5f4 <pintarBlanco+0x21c>
 5a0:	58 4a 00 00 	sw (r2+0),r10
 5a4:	58 43 00 14 	sw (r2+20),r3
 5a8:	e3 ff ff b5 	bi 47c <pintarBlanco+0xa4>
					if(j==3){LCD->addr3=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>65532 && addr<=76799) {if(j==0){LCD->addr4=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr4=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr4=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr4=addr-320;LCD->DATA = 0x01;}
 5ac:	5c e8 ff c8 	bne r7,r8,4cc <pintarBlanco+0xf4>
 5b0:	34 21 fe c0 	addi r1,r1,-320
 5b4:	58 41 00 10 	sw (r2+16),r1
 5b8:	34 01 00 01 	mvi r1,1
 5bc:	58 41 00 14 	sw (r2+20),r1
 5c0:	e3 ff ff c4 	bi 4d0 <pintarBlanco+0xf8>
					if(j==3){LCD->addr2=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>49149 && addr<=65532) { if(j==0){LCD->addr3=addr;   LCD->DATA = 0x01;}
					if(j==1){LCD->addr3=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr3=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr3=addr-320;LCD->DATA = 0x01;}
 5c4:	5c e8 ff bd 	bne r7,r8,4b8 <pintarBlanco+0xe0>
 5c8:	58 51 00 0c 	sw (r2+12),r17
 5cc:	58 43 00 14 	sw (r2+20),r3
 5d0:	e3 ff ff ba 	bi 4b8 <pintarBlanco+0xe0>
					if(j==3){LCD->addr1=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>32766 && addr<=49149) { if(j==0){LCD->addr2=addr;   LCD->DATA = 0x01;}
					if(j==1){LCD->addr2=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr2=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr2=addr-320;LCD->DATA = 0x01;}
 5d4:	5c e8 ff b4 	bne r7,r8,4a4 <pintarBlanco+0xcc>
 5d8:	58 51 00 08 	sw (r2+8),r17
 5dc:	58 43 00 14 	sw (r2+20),r3
 5e0:	e3 ff ff b1 	bi 4a4 <pintarBlanco+0xcc>
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x01;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x01;}
					if(j==1){LCD->addr1=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr1=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr1=addr-320;LCD->DATA = 0x01;}
 5e4:	5c e8 ff ab 	bne r7,r8,490 <pintarBlanco+0xb8>
 5e8:	58 51 00 04 	sw (r2+4),r17
 5ec:	58 43 00 14 	sw (r2+20),r3
 5f0:	e3 ff ff a8 	bi 490 <pintarBlanco+0xb8>
	addr = conversion(st2,posX,posY);
	for(j=0;j<4;j++){
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x01;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x01;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x01;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x01;}
 5f4:	5c e8 ff a2 	bne r7,r8,47c <pintarBlanco+0xa4>
 5f8:	58 51 00 00 	sw (r2+0),r17
 5fc:	58 43 00 14 	sw (r2+20),r3
 600:	e3 ff ff 9f 	bi 47c <pintarBlanco+0xa4>

00000604 <pintarNegro>:
			}		
return;
}

//********PINTAR NEGRO***********
void pintarNegro(char st2, char posX, char posY){
 604:	37 9c ff d8 	addi sp,sp,-40
 608:	5b 8b 00 28 	sw (sp+40),r11
 60c:	5b 8c 00 24 	sw (sp+36),r12
 610:	5b 8d 00 20 	sw (sp+32),r13
 614:	5b 8e 00 1c 	sw (sp+28),r14
 618:	5b 8f 00 18 	sw (sp+24),r15
 61c:	5b 90 00 14 	sw (sp+20),r16
 620:	5b 91 00 10 	sw (sp+16),r17
 624:	5b 92 00 0c 	sw (sp+12),r18
 628:	5b 93 00 08 	sw (sp+8),r19
 62c:	5b 9d 00 04 	sw (sp+4),ra
int addr;
char j;
	addr= conversion(st2,posX,posY);
 630:	20 42 00 ff 	andi r2,r2,0xff
 634:	20 63 00 ff 	andi r3,r3,0xff
 638:	20 21 00 ff 	andi r1,r1,0xff
 63c:	fb ff ff 0a 	calli 264 <conversion>
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x00;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x00;}
 640:	78 02 00 00 	mvhi r2,0x0
 644:	38 42 0a dc 	ori r2,r2,0xadc

//********PINTAR NEGRO***********
void pintarNegro(char st2, char posX, char posY){
int addr;
char j;
	addr= conversion(st2,posX,posY);
 648:	78 05 ff ff 	mvhi r5,0xffff
 64c:	78 04 ff ff 	mvhi r4,0xffff
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x00;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x00;}
 650:	28 42 00 00 	lw r2,(r2+0)

//********PINTAR NEGRO***********
void pintarNegro(char st2, char posX, char posY){
int addr;
char j;
	addr= conversion(st2,posX,posY);
 654:	38 a5 40 02 	ori r5,r5,0x4002
 658:	38 84 00 03 	ori r4,r4,0x3
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x00;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x00;}
 65c:	34 06 00 01 	mvi r6,1
 660:	34 03 00 00 	mvi r3,0

//********PINTAR NEGRO***********
void pintarNegro(char st2, char posX, char posY){
int addr;
char j;
	addr= conversion(st2,posX,posY);
 664:	b4 25 88 00 	add r17,r1,r5
 668:	b4 24 80 00 	add r16,r1,r4
 66c:	34 2f c0 00 	addi r15,r1,-16384
 670:	34 2e 80 01 	addi r14,r1,-32767
	for(j=0;j<4;j++){
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x00;}
 674:	34 0d 3f ff 	mvi r13,16383
 678:	b8 60 28 00 	mv r5,r3
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x00;}
 67c:	b8 c0 40 00 	mv r8,r6
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x00;}
 680:	34 13 00 02 	mvi r19,2
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x00;}
 684:	34 09 00 03 	mvi r9,3
 688:	34 32 fe c0 	addi r18,r1,-320
char j;
	addr= conversion(st2,posX,posY);
	for(j=0;j<4;j++){
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x00;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x00;}
 68c:	34 2b fe c1 	addi r11,r1,-319
int addr;
char j;
	addr= conversion(st2,posX,posY);
	for(j=0;j<4;j++){
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x00;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x00;}
 690:	b4 26 50 00 	add r10,r1,r6
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x00;}
 694:	34 04 3f fe 	mvi r4,16382
	if(addr>49149 && addr<=65532) { if(j==0){LCD->addr3=addr;   LCD->DATA = 0x00;}
					if(j==1){LCD->addr3=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr3=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr3=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>65532 && addr<=76799) {if(j==0){LCD->addr4=addr; LCD->DATA = 0x00;}
 698:	34 0c 2c 02 	mvi r12,11266
void pintarNegro(char st2, char posX, char posY){
int addr;
char j;
	addr= conversion(st2,posX,posY);
	for(j=0;j<4;j++){
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x00;}
 69c:	54 2d 00 05 	bgu r1,r13,6b0 <pintarNegro+0xac>
 6a0:	20 67 00 ff 	andi r7,r3,0xff
 6a4:	5c e0 00 30 	bne r7,r0,764 <pintarNegro+0x160>
 6a8:	58 41 00 00 	sw (r2+0),r1
 6ac:	58 47 00 14 	sw (r2+20),r7
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x00;}
 6b0:	55 e4 00 05 	bgu r15,r4,6c4 <pintarNegro+0xc0>
 6b4:	20 67 00 ff 	andi r7,r3,0xff
 6b8:	5c e0 00 2f 	bne r7,r0,774 <pintarNegro+0x170>
 6bc:	58 41 00 04 	sw (r2+4),r1
 6c0:	58 47 00 14 	sw (r2+20),r7
					if(j==1){LCD->addr1=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr1=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr1=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>32766 && addr<=49149) { if(j==0){LCD->addr2=addr;   LCD->DATA = 0x00;}
 6c4:	55 c4 00 05 	bgu r14,r4,6d8 <pintarNegro+0xd4>
 6c8:	20 67 00 ff 	andi r7,r3,0xff
 6cc:	5c e0 00 2e 	bne r7,r0,784 <pintarNegro+0x180>
 6d0:	58 41 00 08 	sw (r2+8),r1
 6d4:	58 47 00 14 	sw (r2+20),r7
					if(j==1){LCD->addr2=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr2=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr2=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>49149 && addr<=65532) { if(j==0){LCD->addr3=addr;   LCD->DATA = 0x00;}
 6d8:	56 24 00 05 	bgu r17,r4,6ec <pintarNegro+0xe8>
 6dc:	20 67 00 ff 	andi r7,r3,0xff
 6e0:	5c e0 00 2d 	bne r7,r0,794 <pintarNegro+0x190>
 6e4:	58 41 00 0c 	sw (r2+12),r1
 6e8:	58 47 00 14 	sw (r2+20),r7
					if(j==1){LCD->addr3=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr3=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr3=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>65532 && addr<=76799) {if(j==0){LCD->addr4=addr; LCD->DATA = 0x00;}
 6ec:	56 0c 00 05 	bgu r16,r12,700 <pintarNegro+0xfc>
 6f0:	20 67 00 ff 	andi r7,r3,0xff
 6f4:	5c e0 00 17 	bne r7,r0,750 <pintarNegro+0x14c>
 6f8:	58 41 00 10 	sw (r2+16),r1
 6fc:	58 47 00 14 	sw (r2+20),r7
//********PINTAR NEGRO***********
void pintarNegro(char st2, char posX, char posY){
int addr;
char j;
	addr= conversion(st2,posX,posY);
	for(j=0;j<4;j++){
 700:	51 26 00 10 	bgeu r9,r6,740 <pintarNegro+0x13c>
					if(j==3){LCD->addr4=addr-320;LCD->DATA = 0x00;}
					}
			}		

return;
}
 704:	2b 9d 00 04 	lw ra,(sp+4)
 708:	2b 8b 00 28 	lw r11,(sp+40)
 70c:	2b 8c 00 24 	lw r12,(sp+36)
 710:	2b 8d 00 20 	lw r13,(sp+32)
 714:	2b 8e 00 1c 	lw r14,(sp+28)
 718:	2b 8f 00 18 	lw r15,(sp+24)
 71c:	2b 90 00 14 	lw r16,(sp+20)
 720:	2b 91 00 10 	lw r17,(sp+16)
 724:	2b 92 00 0c 	lw r18,(sp+12)
 728:	2b 93 00 08 	lw r19,(sp+8)
 72c:	37 9c 00 28 	addi sp,sp,40
 730:	c3 a0 00 00 	ret
					if(j==2){LCD->addr3=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr3=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>65532 && addr<=76799) {if(j==0){LCD->addr4=addr; LCD->DATA = 0x00;}
					if(j==1){LCD->addr4=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr4=addr-319;LCD->DATA = 0x00;}
 734:	5c f3 00 2c 	bne r7,r19,7e4 <pintarNegro+0x1e0>
 738:	58 4b 00 10 	sw (r2+16),r11
 73c:	58 45 00 14 	sw (r2+20),r5
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x00;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x00;}
 740:	34 c6 00 01 	addi r6,r6,1
 744:	34 63 00 01 	addi r3,r3,1
 748:	20 c6 00 ff 	andi r6,r6,0xff
 74c:	e3 ff ff d4 	bi 69c <pintarNegro+0x98>
					if(j==1){LCD->addr3=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr3=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr3=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>65532 && addr<=76799) {if(j==0){LCD->addr4=addr; LCD->DATA = 0x00;}
					if(j==1){LCD->addr4=addr+1;  LCD->DATA = 0x00;}
 750:	5c e8 ff f9 	bne r7,r8,734 <pintarNegro+0x130>
 754:	58 4a 00 10 	sw (r2+16),r10
 758:	58 45 00 14 	sw (r2+20),r5
//********PINTAR NEGRO***********
void pintarNegro(char st2, char posX, char posY){
int addr;
char j;
	addr= conversion(st2,posX,posY);
	for(j=0;j<4;j++){
 75c:	51 26 ff f9 	bgeu r9,r6,740 <pintarNegro+0x13c>
 760:	e3 ff ff e9 	bi 704 <pintarNegro+0x100>
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x00;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x00;}
 764:	5c e8 00 1c 	bne r7,r8,7d4 <pintarNegro+0x1d0>
 768:	58 4a 00 00 	sw (r2+0),r10
 76c:	58 45 00 14 	sw (r2+20),r5
 770:	e3 ff ff d0 	bi 6b0 <pintarNegro+0xac>
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x00;}
					if(j==1){LCD->addr1=addr+1;  LCD->DATA = 0x00;}
 774:	5c e8 00 14 	bne r7,r8,7c4 <pintarNegro+0x1c0>
 778:	58 4a 00 04 	sw (r2+4),r10
 77c:	58 45 00 14 	sw (r2+20),r5
 780:	e3 ff ff d1 	bi 6c4 <pintarNegro+0xc0>
					if(j==2){LCD->addr1=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr1=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>32766 && addr<=49149) { if(j==0){LCD->addr2=addr;   LCD->DATA = 0x00;}
					if(j==1){LCD->addr2=addr+1;  LCD->DATA = 0x00;}
 784:	5c e8 00 0c 	bne r7,r8,7b4 <pintarNegro+0x1b0>
 788:	58 4a 00 08 	sw (r2+8),r10
 78c:	58 45 00 14 	sw (r2+20),r5
 790:	e3 ff ff d2 	bi 6d8 <pintarNegro+0xd4>
					if(j==2){LCD->addr2=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr2=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>49149 && addr<=65532) { if(j==0){LCD->addr3=addr;   LCD->DATA = 0x00;}
					if(j==1){LCD->addr3=addr+1;  LCD->DATA = 0x00;}
 794:	5c e8 00 04 	bne r7,r8,7a4 <pintarNegro+0x1a0>
 798:	58 4a 00 0c 	sw (r2+12),r10
 79c:	58 45 00 14 	sw (r2+20),r5
 7a0:	e3 ff ff d3 	bi 6ec <pintarNegro+0xe8>
					if(j==2){LCD->addr3=addr-319;LCD->DATA = 0x00;}
 7a4:	5c f3 00 16 	bne r7,r19,7fc <pintarNegro+0x1f8>
 7a8:	58 4b 00 0c 	sw (r2+12),r11
 7ac:	58 45 00 14 	sw (r2+20),r5
 7b0:	e3 ff ff cf 	bi 6ec <pintarNegro+0xe8>
					if(j==2){LCD->addr1=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr1=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>32766 && addr<=49149) { if(j==0){LCD->addr2=addr;   LCD->DATA = 0x00;}
					if(j==1){LCD->addr2=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr2=addr-319;LCD->DATA = 0x00;}
 7b4:	5c f3 00 16 	bne r7,r19,80c <pintarNegro+0x208>
 7b8:	58 4b 00 08 	sw (r2+8),r11
 7bc:	58 45 00 14 	sw (r2+20),r5
 7c0:	e3 ff ff c6 	bi 6d8 <pintarNegro+0xd4>
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x00;}
					if(j==1){LCD->addr1=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr1=addr-319;LCD->DATA = 0x00;}
 7c4:	5c f3 00 16 	bne r7,r19,81c <pintarNegro+0x218>
 7c8:	58 4b 00 04 	sw (r2+4),r11
 7cc:	58 45 00 14 	sw (r2+20),r5
 7d0:	e3 ff ff bd 	bi 6c4 <pintarNegro+0xc0>
char j;
	addr= conversion(st2,posX,posY);
	for(j=0;j<4;j++){
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x00;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x00;}
 7d4:	5c f3 00 16 	bne r7,r19,82c <pintarNegro+0x228>
 7d8:	58 4b 00 00 	sw (r2+0),r11
 7dc:	58 45 00 14 	sw (r2+20),r5
 7e0:	e3 ff ff b4 	bi 6b0 <pintarNegro+0xac>
					if(j==3){LCD->addr3=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>65532 && addr<=76799) {if(j==0){LCD->addr4=addr; LCD->DATA = 0x00;}
					if(j==1){LCD->addr4=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr4=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr4=addr-320;LCD->DATA = 0x00;}
 7e4:	5c e9 ff c7 	bne r7,r9,700 <pintarNegro+0xfc>
 7e8:	34 21 fe c0 	addi r1,r1,-320
 7ec:	58 41 00 10 	sw (r2+16),r1
 7f0:	34 01 00 00 	mvi r1,0
 7f4:	58 41 00 14 	sw (r2+20),r1
 7f8:	e3 ff ff c3 	bi 704 <pintarNegro+0x100>
					if(j==3){LCD->addr2=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>49149 && addr<=65532) { if(j==0){LCD->addr3=addr;   LCD->DATA = 0x00;}
					if(j==1){LCD->addr3=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr3=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr3=addr-320;LCD->DATA = 0x00;}
 7fc:	5c e9 ff bc 	bne r7,r9,6ec <pintarNegro+0xe8>
 800:	58 52 00 0c 	sw (r2+12),r18
 804:	58 45 00 14 	sw (r2+20),r5
 808:	e3 ff ff b9 	bi 6ec <pintarNegro+0xe8>
					if(j==3){LCD->addr1=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>32766 && addr<=49149) { if(j==0){LCD->addr2=addr;   LCD->DATA = 0x00;}
					if(j==1){LCD->addr2=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr2=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr2=addr-320;LCD->DATA = 0x00;}
 80c:	5c e9 ff b3 	bne r7,r9,6d8 <pintarNegro+0xd4>
 810:	58 52 00 08 	sw (r2+8),r18
 814:	58 45 00 14 	sw (r2+20),r5
 818:	e3 ff ff b0 	bi 6d8 <pintarNegro+0xd4>
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x00;}
					}
	if(addr>16383 && addr<=32766) {  if(j==0){LCD->addr1=addr;   LCD->DATA =0x00;}
					if(j==1){LCD->addr1=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr1=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr1=addr-320;LCD->DATA = 0x00;}
 81c:	5c e9 ff aa 	bne r7,r9,6c4 <pintarNegro+0xc0>
 820:	58 52 00 04 	sw (r2+4),r18
 824:	58 45 00 14 	sw (r2+20),r5
 828:	e3 ff ff a7 	bi 6c4 <pintarNegro+0xc0>
	addr= conversion(st2,posX,posY);
	for(j=0;j<4;j++){
	if(addr>=0 && addr<=16383)   {  if(j==0){LCD->addr0=addr; LCD->DATA = 0x00;}
					if(j==1){LCD->addr0=addr+1;  LCD->DATA = 0x00;}
					if(j==2){LCD->addr0=addr-319;LCD->DATA = 0x00;}
					if(j==3){LCD->addr0=addr-320;LCD->DATA = 0x00;}
 82c:	5c e9 ff a1 	bne r7,r9,6b0 <pintarNegro+0xac>
 830:	58 52 00 00 	sw (r2+0),r18
 834:	58 45 00 14 	sw (r2+20),r5
 838:	e3 ff ff 9e 	bi 6b0 <pintarNegro+0xac>

0000083c <mouse_status>:

return;
}*/
//********EVALUAR LA TRAMA DE 3 BYTES DEL MOUSE********
void mouse_status(char status, char posX, char posY)
{
 83c:	37 9c ff fc 	addi sp,sp,-4
 840:	5b 9d 00 04 	sw (sp+4),ra
 844:	20 21 00 ff 	andi r1,r1,0xff
char 	digit2, digit3;
	digit2 = (status & 0x30); //Evalua signos del bit de estatus
	digit3 = (status & 0x03); //Evalua el estado de los botones

switch(digit3) {		
 848:	20 24 00 03 	andi r4,r1,0x3
 84c:	34 05 00 01 	mvi r5,1

return;
}*/
//********EVALUAR LA TRAMA DE 3 BYTES DEL MOUSE********
void mouse_status(char status, char posX, char posY)
{
 850:	20 42 00 ff 	andi r2,r2,0xff
 854:	20 63 00 ff 	andi r3,r3,0xff
char 	digit2, digit3;
	digit2 = (status & 0x30); //Evalua signos del bit de estatus
 858:	20 21 00 30 	andi r1,r1,0x30
	digit3 = (status & 0x03); //Evalua el estado de los botones

switch(digit3) {		
 85c:	44 85 00 07 	be r4,r5,878 <mouse_status+0x3c>
 860:	34 05 00 02 	mvi r5,2
 864:	5c 85 00 02 	bne r4,r5,86c <mouse_status+0x30>
		case (0x00): break;//MoverPuntero(digit2,posX,posY);break; 
		case (0x01): pintarNegro(digit2,posX,posY);break;
		case (0x02): pintarBlanco(digit2,posX,posY);break;// B
 868:	fb ff fe dc 	calli 3d8 <pintarBlanco>
		default:  break;//D
		}

return;  
} 
 86c:	2b 9d 00 04 	lw ra,(sp+4)
 870:	37 9c 00 04 	addi sp,sp,4
 874:	c3 a0 00 00 	ret
	digit2 = (status & 0x30); //Evalua signos del bit de estatus
	digit3 = (status & 0x03); //Evalua el estado de los botones

switch(digit3) {		
		case (0x00): break;//MoverPuntero(digit2,posX,posY);break; 
		case (0x01): pintarNegro(digit2,posX,posY);break;
 878:	fb ff ff 63 	calli 604 <pintarNegro>
		case (0x02): pintarBlanco(digit2,posX,posY);break;// B
		default:  break;//D
		}

return;  
} 
 87c:	2b 9d 00 04 	lw ra,(sp+4)
 880:	37 9c 00 04 	addi sp,sp,4
 884:	c3 a0 00 00 	ret

00000888 <main>:
//**********MAIN***********
int main(int argc, char **argv)
{	char j=0,i=0, byte_1=0,byte_2=0,byte_3=0,DoneFrame=0;
 888:	37 9c ff e0 	addi sp,sp,-32
 88c:	5b 8b 00 20 	sw (sp+32),r11
 890:	5b 8c 00 1c 	sw (sp+28),r12
 894:	5b 8d 00 18 	sw (sp+24),r13
 898:	5b 8e 00 14 	sw (sp+20),r14
 89c:	5b 8f 00 10 	sw (sp+16),r15
 8a0:	5b 90 00 0c 	sw (sp+12),r16
 8a4:	5b 91 00 08 	sw (sp+8),r17
 8a8:	5b 9d 00 04 	sw (sp+4),ra
	flag=0;
 8ac:	78 0b 00 00 	mvhi r11,0x0
	uart_putstr("iniciando \r\n");
 8b0:	78 01 00 00 	mvhi r1,0x0
return;  
} 
//**********MAIN***********
int main(int argc, char **argv)
{	char j=0,i=0, byte_1=0,byte_2=0,byte_3=0,DoneFrame=0;
	flag=0;
 8b4:	34 02 00 00 	mvi r2,0
	uart_putstr("iniciando \r\n");
 8b8:	38 21 0a c8 	ori r1,r1,0xac8
return;  
} 
//**********MAIN***********
int main(int argc, char **argv)
{	char j=0,i=0, byte_1=0,byte_2=0,byte_3=0,DoneFrame=0;
	flag=0;
 8bc:	39 6b 0a ec 	ori r11,r11,0xaec
 8c0:	31 62 00 00 	sb (r11+0),r2
	uart_putstr("iniciando \r\n");
 8c4:	f8 00 00 74 	calli a94 <uart_putstr>
	irq_enable();
 8c8:	fb ff fe 1e 	calli 140 <irq_enable>
	irq_set_mask( 0x00000004); 
 8cc:	34 01 00 04 	mvi r1,4
 8d0:	fb ff fe 22 	calli 158 <irq_set_mask>
}
return xprima;
}

void initPuntero(){
xprima=76799;
 8d4:	78 01 00 00 	mvhi r1,0x0
 8d8:	38 21 0a d8 	ori r1,r1,0xad8
 8dc:	28 22 00 00 	lw r2,(r1+0)
 8e0:	78 03 00 01 	mvhi r3,0x1
 8e4:	78 01 00 00 	mvhi r1,0x0
 8e8:	38 21 0a f0 	ori r1,r1,0xaf0
 8ec:	38 63 2b ff 	ori r3,r3,0x2bff
 8f0:	58 23 00 00 	sw (r1+0),r3
}

//********PS/2 TRANSMISION********
void ps2_tx (char c)
{
	while (ps2->ucr & PS2_BUSY) ;
 8f4:	28 41 00 00 	lw r1,(r2+0)
 8f8:	20 21 00 01 	andi r1,r1,0x1
 8fc:	5c 20 ff fe 	bne r1,r0,8f4 <main+0x6c>
	ps2->tx = c;
 900:	34 01 00 ff 	mvi r1,255
 904:	58 41 00 08 	sw (r2+8),r1
}

//********PS/2 TRANSMISION********
void ps2_tx (char c)
{
	while (ps2->ucr & PS2_BUSY) ;
 908:	28 41 00 00 	lw r1,(r2+0)
 90c:	20 21 00 01 	andi r1,r1,0x1
 910:	5c 20 ff fe 	bne r1,r0,908 <main+0x80>
	ps2_tx(0xF4);
	for(i=0;i<100;i++);
	flag=0;i=0;


flag=0;i=0;
 914:	78 0c 00 00 	mvhi r12,0x0

//********PS/2 TRANSMISION********
void ps2_tx (char c)
{
	while (ps2->ucr & PS2_BUSY) ;
	ps2->tx = c;
 918:	34 03 00 f4 	mvi r3,244
	ps2_tx(0xF4);
	for(i=0;i<100;i++);
	flag=0;i=0;


flag=0;i=0;
 91c:	39 8c 0a e8 	ori r12,r12,0xae8

//********PS/2 TRANSMISION********
void ps2_tx (char c)
{
	while (ps2->ucr & PS2_BUSY) ;
	ps2->tx = c;
 920:	58 43 00 08 	sw (r2+8),r3
	ps2_tx(0xF4);
	for(i=0;i<100;i++);
	flag=0;i=0;


flag=0;i=0;
 924:	29 82 00 00 	lw r2,(r12+0)
 928:	b8 20 68 00 	mv r13,r1
//Cada vez que se halla pulsado el Reset del SIE, el mouse se reseteará nuevamente y se habilitará el envío de datos	
	ps2_tx(0xFF);
	for(i=0;i<200;i++);//Un delay por si acaso
	ps2_tx(0xF4);
	for(i=0;i<100;i++);
	flag=0;i=0;
 92c:	31 61 00 00 	sb (r11+0),r1


flag=0;i=0;
 930:	31 61 00 00 	sb (r11+0),r1
 934:	b8 20 80 00 	mv r16,r1

for(;j<1;){     while(!flag);
 938:	b9 a0 28 00 	mv r5,r13
 93c:	b9 60 08 00 	mv r1,r11
		switch(i){
 940:	34 03 00 01 	mvi r3,1
	flag=0;i=0;


flag=0;i=0;

for(;j<1;){     while(!flag);
 944:	41 66 00 00 	lbu r6,(r11+0)
 948:	34 04 00 00 	mvi r4,0
 94c:	44 c4 ff fe 	be r6,r4,944 <main+0xbc>
		switch(i){
 950:	46 03 00 06 	be r16,r3,968 <main+0xe0>
			case 0: byte_1=*p;i++;break;
 954:	40 4d 00 00 	lbu r13,(r2+0)
			case 1: byte_2=*p;i++;break;
			default: i=0; break;
			}
		if(i==2) {j=1;i=0;break;}
		flag=0;
 958:	34 10 00 01 	mvi r16,1
 95c:	30 25 00 00 	sb (r1+0),r5

flag=0;i=0;

for(;j<1;){     while(!flag);
		switch(i){
			case 0: byte_1=*p;i++;break;
 960:	21 ad 00 ff 	andi r13,r13,0xff
 964:	e3 ff ff f8 	bi 944 <main+0xbc>
			case 1: byte_2=*p;i++;break;
 968:	40 4f 00 00 	lbu r15,(r2+0)
flag=0;i=0;
//Despues de la activación se reciben paquetes de 3 bytes
for(;;){	
		
		while(!flag);
		switch(i){
 96c:	34 0e 00 01 	mvi r14,1
		if(i==2) {j=1;i=0;break;}
		flag=0;
	}


flag=0;i=0;
 970:	30 24 00 00 	sb (r1+0),r4
flag=0;i=0;

for(;j<1;){     while(!flag);
		switch(i){
			case 0: byte_1=*p;i++;break;
			case 1: byte_2=*p;i++;break;
 974:	21 ef 00 ff 	andi r15,r15,0xff
for(;;){	
		
		while(!flag);
		switch(i){
			case 0:  byte_1=*p;i++;break;
			case 1:  byte_2=*p;i++;break;
 978:	34 11 00 02 	mvi r17,2

flag=0;i=0;
//Despues de la activación se reciben paquetes de 3 bytes
for(;;){	
		
		while(!flag);
 97c:	41 63 00 00 	lbu r3,(r11+0)
 980:	44 60 ff ff 	be r3,r0,97c <main+0xf4>
		switch(i){
 984:	44 8e 00 0c 	be r4,r14,9b4 <main+0x12c>
 988:	5c 80 00 08 	bne r4,r0,9a8 <main+0x120>
			case 0:  byte_1=*p;i++;break;
 98c:	29 81 00 00 	lw r1,(r12+0)
 990:	ba 00 20 00 	mv r4,r16
 994:	40 2d 00 00 	lbu r13,(r1+0)
 998:	21 ad 00 ff 	andi r13,r13,0xff
			case 1:  byte_2=*p;i++;break;
			case 2:  byte_3=*p;DoneFrame=1;break;
			default: byte_1=0;break;
		}
		if(DoneFrame){ DoneFrame=0;i=0;mouse_status(byte_1, byte_2, byte_3);} // put P
		flag=0;
 99c:	34 03 00 00 	mvi r3,0
 9a0:	31 63 00 00 	sb (r11+0),r3
 9a4:	e3 ff ff f6 	bi 97c <main+0xf4>
flag=0;i=0;
//Despues de la activación se reciben paquetes de 3 bytes
for(;;){	
		
		while(!flag);
		switch(i){
 9a8:	44 91 00 08 	be r4,r17,9c8 <main+0x140>
			case 0:  byte_1=*p;i++;break;
			case 1:  byte_2=*p;i++;break;
			case 2:  byte_3=*p;DoneFrame=1;break;
			default: byte_1=0;break;
		}
		if(DoneFrame){ DoneFrame=0;i=0;mouse_status(byte_1, byte_2, byte_3);} // put P
 9ac:	34 0d 00 00 	mvi r13,0
 9b0:	e3 ff ff fb 	bi 99c <main+0x114>
for(;;){	
		
		while(!flag);
		switch(i){
			case 0:  byte_1=*p;i++;break;
			case 1:  byte_2=*p;i++;break;
 9b4:	29 81 00 00 	lw r1,(r12+0)
 9b8:	34 04 00 02 	mvi r4,2
 9bc:	40 2f 00 00 	lbu r15,(r1+0)
 9c0:	21 ef 00 ff 	andi r15,r15,0xff
 9c4:	e3 ff ff f6 	bi 99c <main+0x114>
			case 2:  byte_3=*p;DoneFrame=1;break;
 9c8:	29 83 00 00 	lw r3,(r12+0)
			default: byte_1=0;break;
		}
		if(DoneFrame){ DoneFrame=0;i=0;mouse_status(byte_1, byte_2, byte_3);} // put P
 9cc:	b9 a0 08 00 	mv r1,r13
 9d0:	b9 e0 10 00 	mv r2,r15
		
		while(!flag);
		switch(i){
			case 0:  byte_1=*p;i++;break;
			case 1:  byte_2=*p;i++;break;
			case 2:  byte_3=*p;DoneFrame=1;break;
 9d4:	40 63 00 00 	lbu r3,(r3+0)
			default: byte_1=0;break;
		}
		if(DoneFrame){ DoneFrame=0;i=0;mouse_status(byte_1, byte_2, byte_3);} // put P
 9d8:	20 63 00 ff 	andi r3,r3,0xff
 9dc:	fb ff ff 98 	calli 83c <mouse_status>
 9e0:	34 04 00 00 	mvi r4,0
 9e4:	e3 ff ff ee 	bi 99c <main+0x114>

000009e8 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 9e8:	c3 a0 00 00 	ret

000009ec <isr_init>:

void isr_init()
{
 9ec:	78 01 00 00 	mvhi r1,0x0
 9f0:	38 21 0a f4 	ori r1,r1,0xaf4
 9f4:	78 02 00 00 	mvhi r2,0x0
 9f8:	38 42 09 e8 	ori r2,r2,0x9e8
 */
void isr_null()
{
}

void isr_init()
 9fc:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 a00:	58 22 00 00 	sw (r1+0),r2
 a04:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 a08:	5c 23 ff fe 	bne r1,r3,a00 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 a0c:	c3 a0 00 00 	ret

00000a10 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 a10:	3c 21 00 02 	sli r1,r1,2
 a14:	78 03 00 00 	mvhi r3,0x0
 a18:	38 63 0a f4 	ori r3,r3,0xaf4
 a1c:	b4 61 18 00 	add r3,r3,r1
 a20:	58 62 00 00 	sw (r3+0),r2
}
 a24:	c3 a0 00 00 	ret

00000a28 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 a28:	3c 21 00 02 	sli r1,r1,2
 a2c:	78 03 00 00 	mvhi r3,0x0
 a30:	38 63 0a f4 	ori r3,r3,0xaf4
 a34:	78 02 00 00 	mvhi r2,0x0
 a38:	b4 61 18 00 	add r3,r3,r1
 a3c:	38 42 09 e8 	ori r2,r2,0x9e8
 a40:	58 62 00 00 	sw (r3+0),r2
}
 a44:	c3 a0 00 00 	ret

00000a48 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 a48:	c3 a0 00 00 	ret

00000a4c <uart_getchar>:

char uart_getchar()
{   
 a4c:	78 01 00 00 	mvhi r1,0x0
 a50:	38 21 0a e0 	ori r1,r1,0xae0
 a54:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 a58:	28 41 00 00 	lw r1,(r2+0)
 a5c:	20 21 00 20 	andi r1,r1,0x20
 a60:	44 20 ff fe 	be r1,r0,a58 <uart_getchar+0xc>
	return uart0->rxtx;
 a64:	28 41 00 04 	lw r1,(r2+4)
}
 a68:	20 21 00 ff 	andi r1,r1,0xff
 a6c:	c3 a0 00 00 	ret

00000a70 <uart_putchar>:

void uart_putchar(char c)
{
 a70:	78 02 00 00 	mvhi r2,0x0
 a74:	38 42 0a e0 	ori r2,r2,0xae0
 a78:	28 43 00 00 	lw r3,(r2+0)
 a7c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ; 
 a80:	28 62 00 00 	lw r2,(r3+0)
 a84:	20 42 00 10 	andi r2,r2,0x10
 a88:	5c 40 ff fe 	bne r2,r0,a80 <uart_putchar+0x10>
	uart0->rxtx = c;
 a8c:	58 61 00 04 	sw (r3+4),r1
}
 a90:	c3 a0 00 00 	ret

00000a94 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 a94:	40 24 00 00 	lbu r4,(r1+0)
 a98:	44 80 00 0b 	be r4,r0,ac4 <uart_putstr+0x30>
 a9c:	78 02 00 00 	mvhi r2,0x0
 aa0:	38 42 0a e0 	ori r2,r2,0xae0
 aa4:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ; 
 aa8:	28 62 00 00 	lw r2,(r3+0)
 aac:	20 42 00 10 	andi r2,r2,0x10
 ab0:	5c 40 ff fe 	bne r2,r0,aa8 <uart_putstr+0x14>
	uart0->rxtx = c;
 ab4:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 ab8:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 abc:	40 24 00 00 	lbu r4,(r1+0)
 ac0:	5c 82 ff fa 	bne r4,r2,aa8 <uart_putstr+0x14>
 ac4:	c3 a0 00 00 	ret
